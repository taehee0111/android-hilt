hilt 공부
=========================================

### [사전 지식 종속 항목 삽입](https://developer.android.com/training/dependency-injection?hl=ko)
#####  개요
종속 항목 삽입 사용 이유: 코드 재 사용성, 테스트 편의성, 리펙토링 편의성

클래스 내부에서 클래스를 생성하는건 종속 항목 삽입이 아니다.

- 종속항목 삽입 방법:
1.생성자 를 통한 삽입
2.매소드를 통한 필드 삽입
-> 라이브러리를 사용하지 않는방법 -> 단점: 상용구 코드가 필요할 수 있다. (종속 되어 있기 때문에 데이터 흐름이 유지되어야한다.)

- 종속항목 삽입 대안: 서비스 로케이터 (디자인 패턴)
  - 서비스 로케이터 : 요소가 소비되는 방식 (종속 항목 삽입과 다름) 삽입할 객체를 제어하고 요청함
  - 종속 항목 삽입과 비교시:
  1.  서비스 로케이터에 필요한 종속 항목 컬렉션은 코드를 테스트하기 더 어렵다. (모든 테스트가 동일한 전역 서비스 로케이터와 상호 작용하기 때문)
  2. 서비스 로케이터에서 사용가능한 종속 항목을 변경하면 참조가 실패하여 런타임 에러 또는 테스트 실패가 발생할 수 있다.
  3. 전채 앱의 전체 기간이 아닌 다른 기간으로 범위 지정시 객체의 전체 기간을 관리하기 더 어렵다.


##### [종속 항목 수동 삽입](https://developer.android.com/training/dependency-injection/manual?hl=ko)

#
#
#
#
#
#
#

# Using Hilt in your Android app

This folder contains the source code for the "Using Hilt in your Android app" codelab.

The codelab is built in multiple GitHub branches:
* `main` is the codelab's starting point.
* `solution` contains the solution to this codelab.


# Introduction
Dependency injection is a technique widely used in programming and well suited
to Android development. By following the principles of dependency injection, you
lay the groundwork for a good app architecture.

Implementing dependency injection provides you with the following advantages:
* Reusability of code.
* Ease of refactoring.
* Ease of testing.


# Pre-requisites
* Experience with Kotlin syntax.
* You understand Dependency Injection.

# Getting Started
1. Install Android Studio, if you don't already have it.
2. Download the sample.
3. Import the sample into Android Studio.
4. Build and run the sample.


# Comparison between different branches
* [Full codelab comparison](https://github.com/googlecodelabs/android-hilt/compare/main...solution)


# License

```
Copyright (C) 2020 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```